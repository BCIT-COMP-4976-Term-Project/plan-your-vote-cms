@model Web.Models.BallotIssue
@using  Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = @Localizer["Edit Ballot Issue"];
}

<h1>@ViewData["Title"]</h1>

<div class="panel panel-default">
    <form asp-action="Edit">
        <div class="row">
            <div class="col-md-12">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="BallotIssueId" />
                <div class="form-group">
                    @Html.LabelFor(ballotIssue => ballotIssue.BallotIssueTitle, new { @class = "control-label" })
                    @Html.TextAreaFor(ballotIssue => ballotIssue.BallotIssueTitle, new { @class = "form-control", @rows = 2 })
                    @Html.ValidationMessageFor(ballotIssue => ballotIssue.BallotIssueTitle, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(ballotIssue => ballotIssue.Description, new { @class = "control-label" })
                    @Html.TextAreaFor(ballotIssue => ballotIssue.Description, new { @class = "form-control", @rows = 4 })
                    @Html.ValidationMessageFor(ballotIssue => ballotIssue.Description, "", new { @class = "text-danger" })
                </div>
                <label class="control-label">@Localizer["Ballot Options"]</label>
                <script>
                    function removeInputChild(optionIndex) {
                        var optionInputs = $(".option-text");

                        if (optionInputs.length > optionIndex) {
                            optionInputs[optionIndex].value = "";
                            $(".option")[optionIndex].classList.add("hide");
                        }
                    }

                    function appendInputChild() {
                        var optionsElement = document.getElementById("options");

                        var row = document.createElement('div');
                        row.setAttribute('class', 'row');

                        var optionColumn = document.createElement('div');
                        optionColumn.setAttribute('class', 'col-md-10');

                        var optionDiv = document.createElement('div');
                        optionDiv.setAttribute('class', 'form-group');

                        var myInput = document.createElement('textarea');
                        myInput.setAttribute('id', `OptionsTitles_${optionsElement.childElementCount}_`);
                        myInput.setAttribute('name', `OptionsTitles[${optionsElement.childElementCount}]`);
                        myInput.setAttribute('type', "text");
                        myInput.setAttribute('class', 'form-control');
                        myInput.setAttribute('rows', 2);

                        optionDiv.append(myInput);

                        optionColumn.append(optionDiv);

                        var removeColumn = document.createElement('div');
                        removeColumn.setAttribute('class', 'col-md-2');

                        var removeButton = document.createElement('button');
                        removeButton.setAttribute('type', 'button');
                        removeButton.setAttribute('role', 'button');
                        removeButton.classList.add("btn", "btn-primary");
                        removeButton.innerText = "Remove Option";

                        removeColumn.append(removeButton);

                        row.append(optionColumn);
                        row.append(removeColumn);

                        optionsElement.append(row);

                    }</script>

                <div id="options">
                    @for (int i = 0; i < Model.BallotIssueOptions.Count; i++)
                    {
                        <div class="row option">
                            <div class="col-md-10">
                                <div class="form-group">
                                    @Html.TextAreaFor(model => model.BallotIssueOptions[i].IssueOptionInfo, new { @class = "form-control option-text", @rows = 2 })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <button id="RemoveIssueOption" type="button" role="button" class="btn btn-primary" onClick="removeInputChild(@i)">Remove Option</button>
                            </div>
                        </div>

                    }
                </div>
                <div>
                    <span class="text-danger">@ViewData["IssueOptionsError"]</span>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="form-group">
                    <button type="button" role="button" class="btn btn-primary" onClick="appendInputChild()">Add Option</button>
                </div>
                <div class="form-group">
                    <input type="submit" value=@Localizer["Save"] class="btn btn-primary" />
                </div>
            </div>
        </div>
    </form>
</div>

<div>
    <a asp-action="Index">@Localizer["Back to List"]</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
